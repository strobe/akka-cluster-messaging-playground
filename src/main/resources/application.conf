akka {


  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  log-dead-letters                 = off # = 10
  log-dead-letters-during-shutdown = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    deployment {
      /worker/nodesRouter {
        router = broadcast-group
        //nr-of-instances = 100
        routees.paths = ["/user/worker"]
        cluster {
          enabled = on
          allow-local-routees = on
          //        use-role = node
        }
      }


      /master/masterNodesRouter {
        router = broadcast-group
        nr-of-instances = 100
        routees.paths = ["/user/worker"]
        cluster {
          enabled = on
          allow-local-routees = on
          //        use-role = node
        }
      }
    }

    // more efficient mailbox that default but doesn't support BalancingDispatcher
    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552"]

    auto-down-unreachable-after = 10s
  }



}


my-fork-join-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}